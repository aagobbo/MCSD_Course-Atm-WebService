//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mind.Atm.Presentation.Mind.Atm.ServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Mind.Atm.ServiceReference.IBankingTransaction")]
    public interface IBankingTransaction {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankingTransaction/DepositarContaCorrente", ReplyAction="http://tempuri.org/IBankingTransaction/DepositarContaCorrenteResponse")]
        void DepositarContaCorrente(string agencia, string conta, decimal valor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankingTransaction/DepositarContaCorrente", ReplyAction="http://tempuri.org/IBankingTransaction/DepositarContaCorrenteResponse")]
        System.Threading.Tasks.Task DepositarContaCorrenteAsync(string agencia, string conta, decimal valor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankingTransaction/SacarContaCorrente", ReplyAction="http://tempuri.org/IBankingTransaction/SacarContaCorrenteResponse")]
        void SacarContaCorrente(string agencia, string conta, decimal valor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankingTransaction/SacarContaCorrente", ReplyAction="http://tempuri.org/IBankingTransaction/SacarContaCorrenteResponse")]
        System.Threading.Tasks.Task SacarContaCorrenteAsync(string agencia, string conta, decimal valor);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBankingTransactionChannel : Mind.Atm.Presentation.Mind.Atm.ServiceReference.IBankingTransaction, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BankingTransactionClient : System.ServiceModel.ClientBase<Mind.Atm.Presentation.Mind.Atm.ServiceReference.IBankingTransaction>, Mind.Atm.Presentation.Mind.Atm.ServiceReference.IBankingTransaction {
        
        public BankingTransactionClient() {
        }
        
        public BankingTransactionClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BankingTransactionClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BankingTransactionClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BankingTransactionClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void DepositarContaCorrente(string agencia, string conta, decimal valor) {
            base.Channel.DepositarContaCorrente(agencia, conta, valor);
        }
        
        public System.Threading.Tasks.Task DepositarContaCorrenteAsync(string agencia, string conta, decimal valor) {
            return base.Channel.DepositarContaCorrenteAsync(agencia, conta, valor);
        }
        
        public void SacarContaCorrente(string agencia, string conta, decimal valor) {
            base.Channel.SacarContaCorrente(agencia, conta, valor);
        }
        
        public System.Threading.Tasks.Task SacarContaCorrenteAsync(string agencia, string conta, decimal valor) {
            return base.Channel.SacarContaCorrenteAsync(agencia, conta, valor);
        }
    }
}
